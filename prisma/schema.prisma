// C2C Ecommerce Application Prisma Schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String         @unique
  name          String?
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sellerProfile SellerProfile?

  // shipping address relation
  shippingAddressess ShippingAddress[]

  //   cart relation
  cart Cart?

  // order relation
  orders Order[]

  // review and rating relation
  productReviews ProductReview[]

  // auction bid relation
  auctionBids AuctionBid[]
  auctionWins Auction[]
}

model SellerProfile {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique @db.Uuid
  name        String
  phone       String
  isActivated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  // seller balance relation
  sellerBalance SellerBalance?
}

model SellerBalance {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs SellerBalanceLog[]

  // seller profile relation
  sellerProfile   SellerProfile @relation(fields: [sellerProfileId], references: [id], onDelete: Cascade)
  sellerProfileId String        @unique @db.Uuid
}

model SellerBalanceLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount    Float
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // seller balance relation
  sellerBalance   SellerBalance @relation(fields: [sellerBalanceId], references: [id], onDelete: Cascade)
  sellerBalanceId String        @unique @db.Uuid

  // order relation
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String? @unique @db.Uuid
}

model ShippingAddress {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String  @unique @db.Uuid
  name    String?
  phone   String?
  address String?
  country String
  city    String

  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // order relation
  orders Order[]
}

// Products with variants and categories
model ProductCategory {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  products    Product[]
  variations  Variation[]

  subCategories    ProductCategory[] @relation("SubCategory")
  parentCategory   ProductCategory?  @relation("SubCategory", fields: [parentCategoryId], references: [id])
  parentCategoryId String?           @db.Uuid
}

//* entity attribute value model
model Product {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  description       String?
  defaultImage      String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  productVariants   ProductVariant[]
  productCategory   ProductCategory  @relation(fields: [productCategoryId], references: [id])
  productCategoryId String           @db.Uuid
  sellerProfile     SellerProfile?   @relation(fields: [sellerProfileId], references: [id], onDelete: NoAction)
  sellerProfileId   String           @db.Uuid

  productReviews ProductReview[]
}

enum AuctionStatus {
  PENDING
  STARTED
  ENDED
}

model Auction {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  minimumBidPrice  Float
  auctionStartDate DateTime
  auctionEndDate   DateTime

  productVariantId String         @unique @db.Uuid
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])

  auctionStatus AuctionStatus @default(PENDING)
  auctionBids   AuctionBid[]

  winner   User?   @relation(fields: [winnerId], references: [id])
  winnerId String? @unique @db.Uuid
}

model AuctionBid {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auction   Auction  @relation(fields: [auctionId], references: [id])
  auctionId String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  bidPrice  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bidPrice])
}

model ProductVariant {
  id                  String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  description         String?
  price               Float
  stock               Int
  productVariantImage String?
  product             Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId           String  @db.Uuid

  hasAuctionOption Boolean  @default(false)
  auction          Auction?

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  // many to many relation with variation options
  variationOptions VariationOption[]

  // cart items relation
  cartItems CartItem[]

  // order items relation
  orderItems OrderItem[]
}

// Variations and options
model Variation {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String            @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  productCategory   ProductCategory?  @relation(fields: [productCategoryId], references: [id], onDelete: SetNull)
  productCategoryId String?           @db.Uuid
  variationOptions  VariationOption[]
}

model VariationOption {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value           String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  variation       Variation        @relation(fields: [variationName], references: [name], onDelete: Cascade)
  variationName   String
  productVariants ProductVariant[]
}

// Cart and orders
model Cart {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique @db.Uuid
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cart             Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId           String         @db.Uuid
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String         @db.Uuid
  quantity         Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// Orders

//* DISABLE THIS JUST BECAUSE ENUM IS NOT SUPPORTED IN SQLITE
enum OrderStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Order {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.Uuid
  orderItems OrderItem[]

  status      OrderStatus @default(PENDING)
  deliveredAt DateTime?

  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: NoAction)
  shippingAddressId String          @unique @db.Uuid
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  paymentDetails   PaymentDetails? @relation(fields: [paymentDetailsId], references: [id], onDelete: SetNull)
  paymentDetailsId String?         @unique @db.Uuid

  // seller balance
  sellerBalanceLogs SellerBalanceLog[]
}

model OrderItem {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId          String         @db.Uuid
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String         @db.Uuid
  quantity         Int
  price            Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // refund request relation
  refundRequest RefundRequest?
}

// enum RefundRequestStatus {
//   PENDING
//   APPROVED
//   DECLINED
//  COMPLETED
//   CANCELLED
// }
model RefundRequest {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId String    @unique @db.Uuid

  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status String @default("PENDING")
}

model PaymentDetails {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  paymentMethod     String?
  processorProvider String   @default("STRIPE")
  paymentId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // order relation
  order Order?
}

// Review and rating

model ProductReview {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId    String   @db.Uuid
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.Uuid
  rating    Int
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
