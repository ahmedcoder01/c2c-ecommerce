{
  "swagger": "2.0",
  "info": {
    "description": "E-Commerce API",
    "version": "1.0.0",
    "title": "E-Commerce API",
    "basePath": "/v1",

    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "basePath": "/v1",
  "schemes": ["http"],
  "produces": ["application/json"],
  "consumes": ["application/json"],
  "securityDefinitions": {
    "Token": {
      "description": "For accessing the protected API resources, you must have received a a valid JWT token after registering or logging in. This JWT token must then be used for all protected resources by passing it in via the 'Authorization' header.\n\nA JWT token is generated by the API by either registering via /users or logging in via /users/login.\n\nThe following format must be in the 'Authorization' header :\n\n    Token: xxxxxx.yyyyyyy.zzzzzz\n    \n",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login a user",
        "description": "Login a user",
        "operationId": "loginUser",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be logged in",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful login",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "401": {
            "description": "Invalid name/password supplied",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },

    "/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "Create a new user",
        "description": "Create a new user",
        "operationId": "createUser",
        "consumes": ["application/json"],
        "produces": ["application/json"],

        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "409": {
            "description": "Email already exists"
          }
        }
      }
    },

    "/auth/refresh": {
      "get": {
        "tags": ["Auth"],
        "summary": "Refresh token",
        "description": "Refresh token",

        "operationId": "refreshToken",
        "produces": ["text/plain"],

        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Invalid token supplied",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },

    "/auth/me": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user",
        "description": "Get current user",
        "operationId": "getCurrentUser",
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "404": {
            "description": "User not logged in",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          },
          "401": {
            "description": "Invalid token supplied",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },

    "/sellers/register": {
      "post": {
        "tags": ["Seller"],
        "summary": "Register a seller",
        "description": "Register a seller",
        "operationId": "registerSeller",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Seller object that needs to be registered",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "409": {
            "description": "Seller already exists"
          }
        }
      }
    },

    "/sellers/profile": {
      "get": {
        "tags": ["Seller"],
        "summary": "Get seller profile",
        "description": "Get seller profile",
        "operationId": "getSellerProfile",
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/SellerProfile"
            }
          },
          "404": {
            "description": "Seller not found",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },

      "delete": {
        "tags": ["Seller"],
        "summary": "Delete seller profile",
        "description": "Delete seller profile",
        "operationId": "deleteSellerProfile",
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Seller not found",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },

    "/sellers/{sellerId}": {
      "get": {
        "tags": ["Seller"],
        "summary": "Get seller profile by id",
        "description": "Get seller profile by id",
        "operationId": "getSellerProfileById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "sellerId",
            "in": "path",
            "description": "ID of seller to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/SellerProfile"
            }
          },
          "404": {
            "description": "Seller not found",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },

    "/sellers/products": {
      "post": {
        "tags": ["Seller Products"],
        "summary": "Create a new product",
        "description": "Create a new product",
        "operationId": "createProduct",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object that needs to be created",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                },
                "category": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "defaultImage": {
                  "type": "string"
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },

    "/sellers/products/{productId}": {
      "get": {
        "description": "Get product by id",
        "summary": "Get product by id",
        "tags": ["Seller Products"],
        "operationId": "getProductById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Product fetched"
          },
          "404": {
            "description": "Product not found"
          }
        }

      }
    },

    "/sellers/products/{productId}/variants": {
      "post": {
        "tags": ["Seller Products"],
        "description": "Create a new product variant",
        "summary": "Create a new product variant",
        "operationId": "createProductVariant",
        "consumes": ["application/json"],
        "produces": ["application/json"],

        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Product variant object that needs to be created",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "price": {
                  "type": "number"
                },
                "image": {
                  "type": "string"
                },
                "stock": {
                  "type": "integer"
                },

                "variationOptions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/sellers/products/{productId}/variants/options": {
      "get": {
        "tags": ["Seller Products"],
        "description": "Fetch all product variation options",
        "summary": "Fetch all product variation options",
        "operationId": "getProductVariantOptions",
        "consumes": ["application/json"],
        "produces": ["application/json"],

        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "integer"
          }
          
        ],

        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    }
  },
  "definitions": {
    "LoginUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      },
      "required": ["email", "password"]
    },
    "LoginUserRequest": {
      "type": "object",

      "$ref": "#/definitions/LoginUser",
      "required": ["user"]
    },
    "NewUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      },
      "required": ["name", "email", "password"]
    },
    "NewUserRequest": {
      "type": "object",
      "$ref": "#/definitions/NewUser",
      "required": ["user"]
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "sellerProfile": {
          "$ref": "#/definitions/SellerProfile"
        }
      },
      "required": ["email", "token", "name", "image"]
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "required": ["user"]
    },

    "GenericErrorModel": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      },
      "required": ["errors"]
    },

    "SellerProfile": {
      "type": "object",

      "properties": {
        "id": {
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "isActivated": {
          "type": "boolean"
        },

        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    }
  }
}
